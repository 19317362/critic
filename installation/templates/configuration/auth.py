# -*- mode: python; encoding: utf-8 -*-
#
# Copyright 2013 Jens Lindstr√∂m, Opera Software ASA
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

# Accepted password hash schemes.  They need to be supported by the passlib
# Python package; see http://packages.python.org/passlib for details.
PASSWORD_HASH_SCHEMES = %(installation.config.password_hash_schemes)r

# Default password hash scheme.  Must be included in PASSWORD_HASH_SCHEMES.
DEFAULT_PASSWORD_HASH_SCHEME = %(installation.config.default_password_hash_scheme)r

# (Approximate) minimum password hash time in seconds.  Higher means safer
# passwords (more difficult to decrypt using brute-force) but slower sign-in
# operation.
MINIMUM_PASSWORD_HASH_TIME = %(installation.config.minimum_password_hash_time)r

# Calibrated minimum rounds per password hash scheme.
MINIMUM_ROUNDS = %(installation.config.minimum_rounds)r

# External authentication providers.
PROVIDERS = {

    # GitHub OAuth-based authentication.
    "github": {
        "enabled": %(installation.config.provider_github.enabled)r,

        # Allow authenticated user to create a Critic user.
        "allow_user_registration": %(installation.config.provider_github.allow_user_registration)r,
        # Verify user email addresses provided by GitHub.
        "verify_email_addresses": %(installation.config.provider_github.verify_email_addresses)r,

        # Client ID and secret.  These are generated by registering an
        # application at https://github.com/settings/applications/new.
        "client_id": %(installation.config.provider_github.client_id)r,
        "client_secret": %(installation.config.provider_github.client_secret)r,

        # Bypass /createuser on first sign in, creating a user automatically.
        "bypass_createuser": %(installation.config.provider_github.bypass_createuser)r,

        # Authentication callback URI.  This same URI must be provided
        # to GitHub when registering the application.  The path
        # component must be "/oauth/github".
        "redirect_uri": %(installation.config.provider_github.redirect_uri)r
    },

    # Google OAuth-based authentication.
    "google": {
        "enabled": %(installation.config.provider_google.enabled)r,

        # Allow authenticated user to create a Critic user.
        "allow_user_registration": %(installation.config.provider_google.allow_user_registration)r,
        # Verify user email addresses provided by Google.
        "verify_email_addresses": %(installation.config.provider_google.verify_email_addresses)r,

        # Client ID and secret.  These are generated by creating a project at
        # https://cloud.google.com/console/project, and then creating an OAuth2
        # client id using the project administration UI.
        "client_id": %(installation.config.provider_google.client_id)r,
        "client_secret": %(installation.config.provider_google.client_secret)r,

        # Bypass /createuser on first sign in, creating a user automatically.
        "bypass_createuser": %(installation.config.provider_google.bypass_createuser)r,

        # Authentication callback URI.  This same URI must be provided
        # to Google when creating the OAuth2 client id.  The path
        # component must be "/oauth/google".
        "redirect_uri": %(installation.config.provider_google.redirect_uri)r
    },

}
